// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App route should be a function returning a route 1`] = `
<Routes>
  <Route
    element={<withClient(UserActionRequired) />}
  >
    <Route
      element={<withQuery(App) />}
      path="/"
    >
      <Route
        element={<ScrollToTopOnMountWrapper />}
      >
        <Route
          element={
            <Navigate
              replace={true}
              to="balances"
            />
          }
          index={true}
        />
        <Route
          path="balances"
        >
          <Route
            element={<Memo(Connect(withQuery(withQuery(withQuery(Connect(withClient(withTransactions(Balance)))))))) />}
            index={true}
          />
          <Route
            element={<Memo(Connect(RawBalanceDetailsPage)) />}
            path="details"
          />
          <Route
            element={
              <PlannedTransactionsPage
                emptyIcon="cozy"
              />
            }
            path="future"
          />
          <Route
            element={<SetFilterAndRedirect />}
            path=":accountOrGroupId/:page"
          />
        </Route>
        <Route
          path="categories"
        >
          <Route
            element={
              <Navigate
                replace={true}
                to="analysis/categories"
              />
            }
            path="*"
          />
        </Route>
        <Route
          path="recurrence"
        >
          <Route
            element={
              <Navigate
                replace={true}
                to="analysis/recurrence"
              />
            }
            path="*"
          />
        </Route>
        <Route
          element={<AnalysisPage />}
          path="analysis"
        >
          <Route
            path="categories"
          >
            <Route
              element={<Unknown />}
              index={true}
            />
            <Route
              element={<Unknown />}
              path=":categoryName/:subcategoryName"
            />
            <Route
              element={<Unknown />}
              path=":categoryName"
            />
          </Route>
          <Route
            path="recurrence"
          >
            <Route
              element={<withError(RecurrencesPage) />}
              index={true}
            />
            <Route
              element={<RecurrencePage />}
              path=":bundleId"
            />
          </Route>
        </Route>
        <Route
          path="settings"
        >
          <Route
            element={<Memo(NewGroupSettings) />}
            path="groups/new"
          />
          <Route
            element={<Memo(ExistingGroupSettings) />}
            path="groups/:groupId"
          />
          <Route
            element={
              <Navigate
                replace={true}
                to="accounts"
              />
            }
            path="accounts/:accountId"
          />
          <Route
            element={
              <Settings
                delayContent={0}
              />
            }
          >
            <Route
              element={<Unknown />}
              index={true}
            />
            <Route
              element={<Memo(AccountsSettings) />}
              path="accounts"
            />
            <Route
              element={<withQuery(withQuery(Groups)) />}
              path="groups"
            />
            <Route
              element={<Unknown />}
              path="configuration"
            />
          </Route>
        </Route>
        <Route
          element={<Unknown />}
          path="transfers"
        />
        <Route
          element={<SearchPage />}
          path="search"
        />
        <Route
          element={<SearchPage />}
          path="search/:search"
        />
        <Route
          element={<DebugRecurrencePage />}
          path="recurrencedebug"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="balances"
            />
          }
          path="*"
        />
      </Route>
    </Route>
  </Route>
</Routes>
`;

exports[`App route should have renderExtraRoutes 1`] = `
<Routes>
  <Route
    element={<withClient(UserActionRequired) />}
  >
    <Route
      element={<withQuery(App) />}
      path="/"
    >
      <Route
        element={<ScrollToTopOnMountWrapper />}
      >
        <Route
          element={
            <Navigate
              replace={true}
              to="balances"
            />
          }
          index={true}
        />
        <Route
          path="balances"
        >
          <Route
            element={<Memo(Connect(withQuery(withQuery(withQuery(Connect(withClient(withTransactions(Balance)))))))) />}
            index={true}
          />
          <Route
            element={<Memo(Connect(RawBalanceDetailsPage)) />}
            path="details"
          />
          <Route
            element={
              <PlannedTransactionsPage
                emptyIcon="cozy"
              />
            }
            path="future"
          />
          <Route
            element={<SetFilterAndRedirect />}
            path=":accountOrGroupId/:page"
          />
        </Route>
        <Route
          path="categories"
        >
          <Route
            element={
              <Navigate
                replace={true}
                to="analysis/categories"
              />
            }
            path="*"
          />
        </Route>
        <Route
          path="recurrence"
        >
          <Route
            element={
              <Navigate
                replace={true}
                to="analysis/recurrence"
              />
            }
            path="*"
          />
        </Route>
        <Route
          element={<AnalysisPage />}
          path="analysis"
        >
          <Route
            path="categories"
          >
            <Route
              element={<Unknown />}
              index={true}
            />
            <Route
              element={<Unknown />}
              path=":categoryName/:subcategoryName"
            />
            <Route
              element={<Unknown />}
              path=":categoryName"
            />
          </Route>
          <Route
            path="recurrence"
          >
            <Route
              element={<withError(RecurrencesPage) />}
              index={true}
            />
            <Route
              element={<RecurrencePage />}
              path=":bundleId"
            />
          </Route>
        </Route>
        <Route
          path="settings"
        >
          <Route
            element={<Memo(NewGroupSettings) />}
            path="groups/new"
          />
          <Route
            element={<Memo(ExistingGroupSettings) />}
            path="groups/:groupId"
          />
          <Route
            element={
              <Navigate
                replace={true}
                to="accounts"
              />
            }
            path="accounts/:accountId"
          />
          <Route
            element={
              <Settings
                delayContent={0}
              />
            }
          >
            <Route
              element={<Unknown />}
              index={true}
            />
            <Route
              element={<Memo(AccountsSettings) />}
              path="accounts"
            />
            <Route
              element={<withQuery(withQuery(Groups)) />}
              path="groups"
            />
            <Route
              element={<Unknown />}
              path="configuration"
            />
          </Route>
        </Route>
        <Route
          element={<Unknown />}
          path="transfers"
        />
        <Route
          element={<SearchPage />}
          path="search"
        />
        <Route
          element={<SearchPage />}
          path="search/:search"
        />
        <Route
          element={<DebugRecurrencePage />}
          path="recurrencedebug"
        />
        <Route
          element={<NewComponent />}
          path="extra-route"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="balances"
            />
          }
          path="*"
        />
      </Route>
    </Route>
  </Route>
</Routes>
`;
